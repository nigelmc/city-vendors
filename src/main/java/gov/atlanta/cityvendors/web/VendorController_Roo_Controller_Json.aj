// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package gov.atlanta.cityvendors.web;

import gov.atlanta.cityvendors.domain.Location;
import gov.atlanta.cityvendors.domain.Vendor;
import gov.atlanta.cityvendors.web.VendorController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect VendorController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> VendorController.showJson(@PathVariable("id") Long id) {
        Vendor vendor = Vendor.findVendor(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (vendor == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(vendor.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> VendorController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Vendor> result = Vendor.findAllVendors();
        return new ResponseEntity<String>(Vendor.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VendorController.createFromJson(@RequestBody String json) {
        Vendor vendor = Vendor.fromJsonToVendor(json);
        vendor.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VendorController.createFromJsonArray(@RequestBody String json) {
        for (Vendor vendor: Vendor.fromJsonArrayToVendors(json)) {
            vendor.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> VendorController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Vendor vendor = Vendor.fromJsonToVendor(json);
        if (vendor.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> VendorController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Vendor vendor: Vendor.fromJsonArrayToVendors(json)) {
            if (vendor.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> VendorController.deleteFromJson(@PathVariable("id") Long id) {
        Vendor vendor = Vendor.findVendor(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (vendor == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        vendor.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDescription", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> VendorController.jsonFindVendorsByDescription(@RequestParam("description") String description) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Vendor.toJsonArray(Vendor.findVendorsByDescription(description).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByLocation", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> VendorController.jsonFindVendorsByLocation(@RequestParam("location") Location location) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Vendor.toJsonArray(Vendor.findVendorsByLocation(location).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByVendorNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> VendorController.jsonFindVendorsByVendorNameLike(@RequestParam("vendorName") String vendorName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Vendor.toJsonArray(Vendor.findVendorsByVendorNameLike(vendorName).getResultList()), headers, HttpStatus.OK);
    }
    
}
